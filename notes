
<!-- working code for moving selected element -->

class CardElementsOffsets {
  constructor(name, Xoffset = 0, Yoffset = 0){
      this.name = name;
      this.Xoffset = Xoffset;
      this.Yoffset = Yoffset;
      CardElementsOffsets.all.push(this)
  }
}
CardElementsOffsets.all = [];


let h1 = document.createElement('h1')
    document.body.appendChild(h1)
    h1.innerText = "ESDEATH"
    let counter = 0;
let cardDiv = document.createElement('div')

cardDiv.style = "border: 5px solid black; width: 100%; height: 400px; background-color: #333; overflow: hidden; border-radius: 7px; touch-action: none;"

document.body.appendChild(cardDiv)

    h1.addEventListener('click', () => { let img = document.createElement('img')
//     img.src="https://static.wikia.nocookie.net/villains/images/9/97/TheEsdeath.png/revision/latest/scale-to-width-down/991?cb=20181205150807"
img.src="http://assets.stickpng.com/images/580b57fcd9996e24bc43c3db.png"
    img.style = "width auto; height: 150px;"
    img.id = `esdeath_${counter}`
    
//     setTranslate(13,78,img)
//
    counter += 1;
    cardDiv.appendChild(img)
    let getofst = img.getBoundingClientRect()
    let ofst = solve(getofst.left, getofst.top)
    setTranslate(ofst.x,ofst.y,img)
    let cardElem = new CardElementsOffsets(img.id)
    cardElem.Xoffset = ofst.x
    cardElem.Yoffset = ofst.y
})

    let dragItem;
    let active = false;
    let currentX;
    let currentY;
    let initialX;
    let initialY;
    let xOffset;
    let yOffset;
    let target;
    
    //cardDiv.addEventListener('mousedown', (e) => (dragItem = document.getElementById(e.target.id)))
    cardDiv.addEventListener("mousedown", dragStart, false);
    cardDiv.addEventListener("mouseup", dragEnd, false);
    cardDiv.addEventListener("mousemove", drag, false);
    
    function dragStart(e) {
      <!-- until card div -->
      dragItem = document.getElementById(e.target.id)
      <!-- -->
      dragItem.style.position = ''
      target = CardElementsOffsets.all.find(element => element.name === e.target.id)
      active = true;
      initialX = e.clientX - target.Xoffset;
      initialY = e.clientY - target.Yoffset;
    }
    
    function drag(e) {
        if (active) {
          e.preventDefault();
          
          currentX = e.clientX - initialX;
          currentY = e.clientY - initialY;
        

        target.Xoffset = currentX;
        target.Yoffset = currentY;

        setTranslate(currentX, currentY, dragItem);
      }
    }

    function setTranslate(xPos, yPos, el) {
      el.style.transform = "translate(" + xPos + "px, " + yPos + "px)";
    }
    
    function dragEnd(e) {
      active = false;
    }
    
    function getOffset(el) {
        const rect = el.getBoundingClientRect();
        return {
          left: rect.left + window.scrollX,
          top: rect.top + window.scrollY
        };
      }

function solve (xNum, yNum) {
    let x = (13 - xNum)
    let y = (78.109375 - yNum)
    return {x: x, y: y}
}


<!-- Error with postgres and Active record -->
ActiveRecord::NoDatabaseError: connection to server on socket "/tmp/.s.PGSQL.5432" failed: FATAL:  database "spooky_season_development" does not exist

<!-- join migration -->
rails g migration CreatePosition name:string x_position:integer y_position:integer card:references element:references

<!-- send fetch to card create function -->
const createCard = () => {
  let formData = {
  name: input.value,
  
};

let configObj = {
  method: 'POST',
  headers: {
    "Content-Type": "application/json",
    "Accept": "application/json"
  },
  body: JSON.stringify(formData)
};

return fetch("http://127.0.0.1:3000/cards", configObj)
  .then(function(response) {
    return response.json();
  })
  .then(function(object) {
    console.log(object);
  })
  .catch(function(error) {
    alert("Bad things! Ragnar≈ëk!");
    console.log(error.message);
  });
}

<!-- Offset Class -->
class CardElementsOffsets {
  constructor(name, Xoffset = 0, Yoffset = 0){
      this.name = name;
      this.Xoffset = Xoffset;
      this.Yoffset = Yoffset;
      CardElementsOffsets.all.push(this)
  }
}
CardElementsOffsets.all = [];
let target;
document.addEventListener('click', (e) => { target = ep.find(element => element.name === e.target.id )})